// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

// Track
// Track can have many genres, labels, comments, contentGroups
model Track {
  id              Int                @id @default(autoincrement())
  createdAt       DateTime           @default(now())
  location        String             @unique
  updateDate      DateTime           @updatedAt
  moods           MoodToTrack[]
  timings         TimingToTrack[]
  comment         CommentToTrack[]
  remixArtists    RemixerToTrack[]
  publishers      PublisherToTrack[]
  artists         ArtistToTrack[]
  trackAttributes TrackAttribute?
  genres          GenreToTrack[]
  groupToTrack    GroupToTrack[]
  ComposerToTrack ComposerToTrack[]
  playlist        PlaylistOnTrack[]

  @@unique([id, location])
}

model TrackAttribute {
  id         Int     @id @default(autoincrement())
  like       Boolean
  pinned     Boolean
  year       String?
  album      String?
  plays      String?
  initialKey String?
  bitrate    Int?
  length     String?
  fileType   String?
  title      String?

  track   Track   @relation(fields: [trackId], references: [id])
  trackId Int     @unique
  size    Int
  bpm     String?
}

// Artist
model Artist {
  id     Int             @id @default(autoincrement())
  name   String?         @unique
  tracks ArtistToTrack[]
}

model ArtistToTrack {
  id       Int    @id @default(autoincrement())
  artist   Artist @relation(fields: [artistId], references: [id])
  artistId Int
  track    Track  @relation(fields: [trackId], references: [id])
  trackId  Int
}

// Genre
model Genre {
  id     Int            @id @default(autoincrement())
  name   String         @unique
  tracks GenreToTrack[]
}

model GenreToTrack {
  id      Int   @id @default(autoincrement())
  genre   Genre @relation(fields: [genreId], references: [id])
  genreId Int
  track   Track @relation(fields: [trackId], references: [id])
  trackId Int
}

// Label
model Publisher {
  id               Int                @id @default(autoincrement())
  name             String             @unique
  PublisherToTrack PublisherToTrack[]
}

model PublisherToTrack {
  id          Int       @id @default(autoincrement())
  publisher   Publisher @relation(fields: [publisherId], references: [id])
  publisherId Int
  track       Track     @relation(fields: [trackId], references: [id])
  trackId     Int
}

// Grouping
model Group {
  id           Int            @id @default(autoincrement())
  name         String         @unique
  GroupToTrack GroupToTrack[]
}

model GroupToTrack {
  id      Int   @id @default(autoincrement())
  group   Group @relation(fields: [groupId], references: [id])
  groupId Int
  track   Track @relation(fields: [trackId], references: [id])
  trackId Int
}

// composer
model Composer {
  id              Int               @id @default(autoincrement())
  name            String            @unique
  ComposerToTrack ComposerToTrack[]
}

model ComposerToTrack {
  id         Int      @id @default(autoincrement())
  composer   Composer @relation(fields: [composerId], references: [id])
  composerId Int
  track      Track    @relation(fields: [trackId], references: [id])
  trackId    Int
}

// Remixer
model Remixer {
  id             Int              @id @default(autoincrement())
  name           String           @unique
  RemixerToTrack RemixerToTrack[]
}

model RemixerToTrack {
  id        Int     @id @default(autoincrement())
  remixer   Remixer @relation(fields: [remixerId], references: [id])
  remixerId Int
  track     Track   @relation(fields: [trackId], references: [id])
  trackId   Int
}

// comments
model Comment {
  id   Int    @id
  name String @unique

  CommentToTrack CommentToTrack[]
}

model CommentToTrack {
  id        Int     @id @default(autoincrement())
  comment   Comment @relation(fields: [commentId], references: [id])
  commentId Int
  track     Track   @relation(fields: [trackId], references: [id])
  trackId   Int
}

model Playlist {
  id              Int               @id @default(autoincrement())
  name            String            @unique
  PlaylistOnTrack PlaylistOnTrack[]
}

model PlaylistOnTrack {
  id         Int      @id @default(autoincrement())
  playlist   Playlist @relation(fields: [playlistId], references: [id])
  playlistId Int
  track      Track    @relation(fields: [trackId], references: [id])
  trackId    Int

  @@unique([playlistId, trackId])
}

model Mood {
  id          Int           @id @default(autoincrement())
  name        String        @unique
  MoodToTrack MoodToTrack[]
}

model MoodToTrack {
  id      Int   @id @default(autoincrement())
  mood    Mood  @relation(fields: [moodId], references: [id])
  moodId  Int
  track   Track @relation(fields: [trackId], references: [id])
  trackId Int
}

model Timing {
  id   Int    @id @default(autoincrement())
  name String @unique

  TimingToTrack TimingToTrack[]
}

model TimingToTrack {
  id       Int    @id @default(autoincrement())
  timing   Timing @relation(fields: [timingId], references: [id])
  timingId Int
  track    Track  @relation(fields: [trackId], references: [id])
  trackId  Int
}
