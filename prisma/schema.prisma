// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

// Track
// Track can have many genres, labels, comments, contentGroups, artists, playlists
model Track {
  id             Int                @id @default(autoincrement())
  createdAt      DateTime           @default(now())
  location       String             @unique
  updateDate     DateTime           @updatedAt
  fileType       String?
  size           String
  artists        ArtistsOnTrack[]
  genres         GenreToTrack[]
  publishers     PublisherToTrack[]
  GroupToTrack   GroupToTrack[]
  CommentToTrack CommentToTrack[]
  playlists      PlaylistOnTrack[]
  moods          MoodsToTrack[]
  trackAttribute TrackAttribute?

  @@unique([id, location])
}

model TrackAttribute {
  id         Int     @id @default(autoincrement())
  bpm        String?
  like       Boolean
  pinned     Boolean
  year       String?
  album      String?
  plays      String?
  initialKey String?
  bitrate    Int?
  length     String?
  title      String?

  track   Track @relation(fields: [trackId], references: [id])
  trackId Int   @unique
}

// Artist & ArtistsOnTrack
// Artist can have many tracks, genres, labels, composers, groups
model Artist {
  id        Int                @id @default(autoincrement())
  name      String?            @unique
  tracks    ArtistsOnTrack[]
  genres    ArtistToGenre[]
}

// ArtistsOnTrack
model ArtistsOnTrack {
  track    Track  @relation(fields: [trackId], references: [id])
  trackId  Int
  artistId Int
  artist   Artist @relation(fields: [artistId], references: [id])

  @@id([trackId, artistId])
}

// Genre & GenreToTrack
model Genre {
  id      Int             @id @default(autoincrement())
  name    String          @unique
  tracks  GenreToTrack[]
  artists ArtistToGenre[]
}

model ArtistToGenre {
  artist   Artist @relation(fields: [artistId], references: [id])
  artistId Int
  genreId  Int
  genre    Genre  @relation(fields: [genreId], references: [id])

  @@id([artistId, genreId])
}

model GenreToTrack {
  track   Track @relation(fields: [trackId], references: [id])
  trackId Int
  genreId Int
  genre   Genre @relation(fields: [genreId], references: [id])

  @@id([trackId, genreId])
}

// Label
model Publisher {
  id     Int                @id @default(autoincrement())
  name   String             @unique
  tracks PublisherToTrack[]
}

model PublisherToTrack {
  publisher   Publisher @relation(fields: [publisherId], references: [id])
  publisherId Int
  track       Track     @relation(fields: [trackId], references: [id])
  trackId     Int

  @@id([trackId, publisherId])
}

// Grouping
model Group {
  id     Int            @id @default(autoincrement())
  name   String         @unique
  groups GroupToTrack[]
}

model GroupToTrack {
  group   Group @relation(fields: [groupId], references: [id])
  groupId Int
  track   Track @relation(fields: [trackId], references: [id])
  trackId Int

  @@id([trackId, groupId])
}

// comments
model Comment {
  id     Int              @id
  name   String           @unique
  tracks CommentToTrack[]
}

model CommentToTrack {
  comment   Comment @relation(fields: [commentId], references: [id])
  commentId Int
  track     Track   @relation(fields: [trackId], references: [id])
  trackId   Int

  @@id([trackId, commentId])
}

model Playlist {
  id               Int                @id @default(autoincrement())
  name             String             @unique
  like             Boolean
  tracks           PlaylistOnTrack[]
}

model PlaylistOnTrack {
  playlist   Playlist @relation(fields: [playlistId], references: [id])
  playlistId Int
  track      Track    @relation(fields: [trackId], references: [id])
  trackId    Int

  @@unique([playlistId, trackId])
}

model Mood {
  id     Int            @id @default(autoincrement())
  name   String         @unique
  tracks MoodsToTrack[]
}

model MoodsToTrack {
  mood    Mood  @relation(fields: [moodId], references: [id])
  moodId  Int
  track   Track @relation(fields: [trackId], references: [id])
  trackId Int

  @@unique([moodId, trackId])
}
